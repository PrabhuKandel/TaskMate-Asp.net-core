@model IEnumerable<Task_Manager.Models.DTOs.TaskDto>

@{
    ViewData["Title"] = "Index";
}
<div class="d-flex justify-content-between align-items-center mb-5">
    <h1 class="mb-0">Task List</h1>
    <div class="sorting-options d-flex gap-3">
        <!-- Sort By Status Dropdown -->
        <!-- Sort By Status Dropdown -->
        <select class="form-select form-select-sm" id="statusSort">
            <option value="">Select Status</option>
            <option value="0" selected="@(Context.Request.Query["status"] == "Pending" ? "selected" : null)">Pending</option>
            <option value="1" selected="@(Context.Request.Query["status"] == "Completed" ? "selected" : null)">Completed</option>
            <option value="2" selected="@(Context.Request.Query["status"] == "Overdue" ? "selected" : null)">Overdue</option>
        </select>

        <!-- Sort By Priority Dropdown -->
        <select class="form-select form-select-sm" id="prioritySort">
            <option value="">Select Priority</option>
            <option value="0" selected="@(Context.Request.Query["priority"] == "Low" ? "selected" : null)">Low</option>
            <option value="1" selected="@(Context.Request.Query["priority"] == "Medium" ? "selected" : null)">Medium</option>
            <option value="2" selected="@(Context.Request.Query["priority"] == "High" ? "selected" : null)">High</option>
        </select>

        <!-- Sort By Due Date Dropdown (Asc/Desc) -->
        <select class="form-select form-select-sm" id="dueDateSort">
            <option value="">Select Due Date</option>
            <option value="asc" selected="@(Context.Request.Query["dueDate"] == "asc" ? "selected" : null)">Sooner - Later</option>
            <option value="desc" selected="@(Context.Request.Query["dueDate"] == "desc" ? "selected" : null)">Later - Sooner</option>
        </select>


        <!-- Reset Button -->
        <button class="btn btn-secondary btn-sm" id="resetButton" >Reset</button>
    </div>
    <a asp-action="Create" class="btn btn-primary w-auto">Create Task</a>
</div>



<div class="container ">
    <div class="row" id="taskListContainer">
@foreach (var task in Model)
{

         <div class="card mb-3  mx-3 col-md-3" data-task-id="@task.Id" style="width: 18rem; background:#F9F9F9;">
        <div class="card-body">
            <div class="d-flex justify-content-between">
                <h5 class="card-title">@task.Name</h5>
                <input type="checkbox"    class="status-checkbox" data-task-id="@task.Id" @(task.Status == Task_Manager.Models.TaskStatus.Completed ? "checked" : "") />
            </div>

            <div>

                   <p>
                        Status:
                            <span class="badge status-badge" data-task-id="@task.Id" data-status="@task.Status">@task.Status.ToString()  </span>
                        </p>
                    <p>
                    Priority:  <span class="badge @(task.Priority == Task_Manager.Models.TaskPriority.High ? "bg-danger" : task.Priority == Task_Manager.Models.TaskPriority.Low ? "bg-success" : "bg-warning")">
                        @task.Priority.ToString()
                    </span>
                    </p>
                    
                        <h6 class="card-subtitle mb-2 mt-2 text-muted">Created At: @task.CreatedTimeAgo</h6>
                <h6 class="card-subtitle mb-2 mt-2 text-muted">Due Date: @task.DueDateUntil</h6>
            </div>

            <div class="d-flex mt-3 justify-content-end">
                <a asp-action="Edit" asp-route-id="@task.Id" class="card-link text-primary">
                    <i class="fa-solid fa-pen-to-square"></i>
                </a>
                        <!--<a asp-action="Delete" asp-route-id="@task.Id" class="card-link text-danger">
                    <i class="fa-solid fa-trash"></i>
                </a>
                        -->
                        <a  href="#" class="card-link delete-button text-danger" data-task-id="@task.Id"> <i class="fa-solid fa-trash"></i></a>

            </div>
        </div>
    </div>
}
    </div>
</div>

<!-- Modal -->
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
        <!-- 'modal-sm' for a compact look -->
        <div class="modal-content">

            <div class="modal-header border-0 p-2 d-flex justify-content-end">
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <!-- Modal Body (Centered Text) -->
            <div class="modal-body text-center">
                <h5 class="modal-title fw-bold">Are you sure you want to delete this task?</h5>

            </div>

            <!-- Modal Footer (No Border, Buttons Full Width on Small Screens) -->
            <div class="modal-footer border-0 d-flex justify-content-center ">
                <button type="button" class="btn btn-primary " data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {

            const statusMap = {
                "Pending": { class: "bg-warning", label: "Pending", value: 0 },
               "Completed": { class: "bg-success", label: "Completed", value: 1 },
                "Overdue": { class: "bg-danger", label: "Overdue", value: 2 },
            };
            // Reverse lookup to map numeric status to strings
            const reverseStatusMap = {
                0: "Pending",
                1: "Completed",
                2: "Overdue",
            };

            // Apply correct badge color based on status
            document.querySelectorAll('.status-badge').forEach(badge => {
                const status = (badge.dataset.status).toString().trim(); 
                badge.classList.add(statusMap[status].class); 
            });



            // When the checkbox is changed
            $(document).on('change', '.status-checkbox', function () {
         
                const  taskId = $(this).data("task-id"); // Get task ID
                const isChecked = $(this).prop("checked");
             
         
                $.ajax({
                    url: '/Task/UpdateStatus',
                    method: 'POST',
              
                    data: {taskId:taskId,isChecked:isChecked},
                    success: function (response) {
                            console.log(response)   
                        if (response.success) {
                            console.log("Status updated successfully");
                            // Select the specific badge using taskId
                            updateBadge(taskId, response.status);

                        } else {
                            console.log("Failed to update status");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("Error while updating status");
                        console.log(xhr,status,error);
                        alert("Error: " + xhr.responseJSON.message); // Display error message from backend
                    }
                });
            });

            // Update the status badge
            function updateBadge(taskId, newStatus) {
                const statusKey = reverseStatusMap[newStatus];
                const badge = $(".status-badge[data-task-id='" + taskId + "']");
                const { class: newClass, label } = statusMap[statusKey];

                badge.text(label)
                    .removeClass("bg-warning bg-success bg-danger")
                    .addClass(newClass);
            }
            //to delete task
            var taskIdToDelete = null;

            // When the Delete button is clicked
            $(document).on('click', '.delete-button', function (e) {
                event.preventDefault(); // Prevents # from being added to URL
                taskIdToDelete = $(this).data("task-id");  // Get task ID from the button
                
                $("#deleteModal").modal("show");  // Show the delete confirmation modal
            });



            // When the Confirm Delete button is clicked
            $(document).on('click', '#confirmDelete', function (e) {
                e.preventDefault(); // REMOVE this if present
                if (taskIdToDelete) {
                    $.ajax({
                        url: '/Task/Delete',  // Your delete endpoint (adjust as needed)
                        method: 'POST',
                        data: { taskId: taskIdToDelete },
                        success: function (response) {
                            if (response.success) {
                                console.log("Task deleted successfully");
                                $("#deleteModal").modal("hide");  // Hide the modal
                                $("div[data-task-id='" + taskIdToDelete + "']").remove(); // Remove deleted task from UI
                            } else {
                                console.log("Failed to delete task");
                            }
                        },
                        error: function (xhr, status, error) {
                            console.log("Error deleting task:", error);
                        }
                    });
                }
            });

         
                // Function to update sorting based on dropdown selections
            // Function to update sorting based on dropdown selections
            function updateSorting() {
                // Maps for converting numeric values to string options
                const statusMap = { 0: "Pending", 1: "Completed", 2: "Overdue" };
                const priorityMap = { 0: "Low", 1: "Medium", 2: "High" };

                // Get current values of the dropdowns
                let statusValue = $('#statusSort').val();
                let priorityValue = $('#prioritySort').val();
                let dueDate = $('#dueDateSort').val();

                // Get the current query string from the URL
                let currentUrl = window.location.href.split('?')[0];
                let queryParams = new URLSearchParams(window.location.search);

                

                // Update the query parameters based on selected values
                if (statusValue) {
                    queryParams.set('status', statusMap[statusValue]);  // Add or update status
                }
                if (priorityValue) {
                    queryParams.set('priority', priorityMap[priorityValue]);  // Add or update priority
                }
                if (dueDate) {
                    queryParams.set('dueDate', dueDate);  // Add or update dueDate
                }

                // Construct the new URL with updated query parameters
                let updatedUrl = currentUrl + '?' + queryParams.toString();

                // Use history.pushState to update the URL without refreshing the page
                history.pushState(null, null, updatedUrl);

                // Send AJAX request to update task list dynamically
                $.ajax({
                    url: updatedUrl,
                    method: 'GET',
                    beforeSend: function () {
                        //$('#taskListContainer').fadeOut();  // Fade out the old task list before showing the new one
                    },
                    success: function (response) {
                 
                        $('#taskListContainer').html(response);  // Replace the old task list with the new one
                         
                    },
                   
                    error: function (xhr) {
                        console.error("Error fetching filtered tasks:", xhr.responseText);
                    }
                });
            }

            // Function to reset the sorting
            function resetSorting() {
                $('#statusSort').val('');
                $('#prioritySort').val('');
                $('#dueDateSort').val('');

                // Reset the URL without query parameters
              //  history.pushState(null, null, '/Task/Index');
            
                   window.location.href = '/Task/Index'; // Reloads page to reset filters
            

            }

            // Attach event listeners using jQuery
            $('#statusSort, #prioritySort, #dueDateSort').on('change', updateSorting);
            $('#resetButton').on('click', resetSorting);

            });

        
    </script>
}


